{"ast":null,"code":"import _classCallCheck from \"/Users/idrissheikh-idris/Downloads/final-project-dave3615/react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/idrissheikh-idris/Downloads/final-project-dave3615/react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nvar API =\n/*#__PURE__*/\nfunction () {\n  function API() {\n    _classCallCheck(this, API);\n  }\n\n  _createClass(API, null, [{\n    key: \"getAllProducts\",\n    // returns Promise\n    // .then .catch\n    value: function getAllProducts() {\n      var url = \"http://localhost:9997/products\";\n      return new Promise(function (resolve, reject) {\n        fetch(url).then(function (res) {\n          return res.json();\n        }).then(function (products) {\n          return resolve(products);\n        }).catch(function (error) {\n          return reject(error);\n        });\n      });\n    }\n  }, {\n    key: \"getAllProductById\",\n    value: function getAllProductById(id) {\n      var url = \"http://localhost:9997/products/\" + id;\n      return new Promise(function (resolve, reject) {\n        fetch(url).then(function (res) {\n          return res.json();\n        }).then(function (product) {\n          return resolve(product);\n        }).catch(function (error) {\n          return reject(error);\n        });\n      });\n    }\n  }, {\n    key: \"getAllMyProduct\",\n    value: function getAllMyProduct(id) {\n      var url = \"http://localhost:9997/myproducts/\" + id;\n      return new Promise(function (resolve, reject) {\n        fetch(url).then(function (res) {\n          return res.json();\n        }).then(function (product) {\n          return resolve(product);\n        }).catch(function (error) {\n          return reject(error);\n        });\n      });\n    }\n  }, {\n    key: \"postProduct\",\n    value: function postProduct(body) {\n      var url = \"http://localhost:9997/products\";\n      var formData = new FormData();\n\n      for (var _i = 0, _Object$keys = Object.keys(body); _i < _Object$keys.length; _i++) {\n        var key = _Object$keys[_i];\n        formData.append(key, body[key]);\n      }\n\n      return new Promise(function (resolve, reject) {\n        fetch(url, {\n          method: \"POST\",\n          // or 'PUT'\n          body: formData\n        }).then(function (res) {\n          return res.json();\n        }).then(function (data) {\n          return resolve(data);\n        }).catch(function (err) {\n          return reject(err);\n        });\n      });\n    }\n  }, {\n    key: \"putProduct\",\n    value: function putProduct(body) {\n      console.log(\"received product: \", body);\n      var url = \"http://localhost:9997/products/\" + body.product.id;\n      console.log(\"url: \", url);\n      return new Promise(function (resolve, reject) {\n        fetch(url, {\n          method: \"PUT\",\n          // or 'PUT'\n          body: JSON.stringify(body),\n          // data can be `string` or {object}!\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        }).then(function (res) {\n          return res.json();\n        }).then(function (data) {\n          return resolve(data);\n        }).catch(function (err) {\n          return reject(err);\n        });\n      });\n    }\n  }, {\n    key: \"deleteProduct\",\n    value: function deleteProduct(id) {\n      var url = \"http://localhost:9997/products/\" + id;\n      return new Promise(function (resolve, reject) {\n        fetch(url, {\n          method: \"DELETE\" // or 'PUT'\n\n        }).then(function () {\n          return resolve();\n        }).catch(function (err) {\n          return reject(err);\n        });\n      });\n    }\n  }, {\n    key: \"getUserById\",\n    value: function getUserById(id) {\n      var url = \"http://localhost:9090/users/\" + id;\n      return new Promise(function (resolve, reject) {\n        fetch(url).then(function (res) {\n          return res.json();\n        }).then(function (merchant) {\n          return resolve(merchant);\n        }).catch(function (error) {\n          return reject(error);\n        });\n      });\n    }\n  }, {\n    key: \"postUser\",\n    value: function postUser(newUser) {\n      var url = \"http://localhost:9090/signup\";\n      return new Promise(function (resolve, reject) {\n        fetch(url, {\n          method: \"POST\",\n          // or 'PUT'\n          body: JSON.stringify(newUser),\n          // data can be `string` or {object}!\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        }).then(function (res) {\n          return res.json();\n        }).then(function (data) {\n          return resolve(data);\n        }).catch(function (err) {\n          return reject(err);\n        });\n      });\n    }\n  }, {\n    key: \"getshippingById\",\n    value: function getshippingById(id) {\n      var url = \"http://localhost:9998/shipping/\" + id;\n      return new Promise(function (resolve, reject) {\n        fetch(url).then(function (res) {\n          return res.json();\n        }).then(function (shipping) {\n          return resolve(shipping);\n        }).catch(function (error) {\n          return reject(error);\n        });\n      });\n    }\n  }, {\n    key: \"postShipping\",\n    value: function postShipping(shipping) {\n      var url = \"http://localhost:9998/shipping\";\n      return new Promise(function (resolve, reject) {\n        fetch(url, {\n          method: \"POST\",\n          // or 'PUT'\n          body: JSON.stringify(shipping),\n          // data can be `string` or {object}!\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        }).then(function (res) {\n          return res.json();\n        }).then(function (data) {\n          return resolve(data);\n        }).catch(function (err) {\n          return reject(err);\n        });\n      });\n    }\n  }, {\n    key: \"updateShipping\",\n    value: function updateShipping(shippingId, userId, shipping) {\n      var url = \"http://localhost:9998/updateShipping/id=\" + shippingId + \"&user_id=\" + userId;\n      return new Promise(function (resolve, reject) {\n        fetch(url, {\n          method: \"PUT\",\n          // or 'PUT'\n          body: JSON.stringify(shipping),\n          // data can be `string` or {object}!\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        }).then(function (res) {\n          return res.json();\n        }).then(function (data) {\n          return resolve(data);\n        }).catch(function (err) {\n          return reject(err);\n        });\n      });\n    }\n  }, {\n    key: \"putShipping\",\n    value: function putShipping(shipping) {\n      var url = \"http://localhost:9998/shipping/\" + shipping.id;\n      return new Promise(function (resolve, reject) {\n        fetch(url, {\n          method: \"PUT\",\n          // or 'PUT'\n          body: JSON.stringify(shipping),\n          // data can be `string` or {object}!\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        }).then(function (res) {\n          return res.json();\n        }).then(function (data) {\n          return resolve(data);\n        }).catch(function (err) {\n          return reject(err);\n        });\n      });\n    }\n  }, {\n    key: \"decreaseProductQuantity\",\n    value: function decreaseProductQuantity(id) {\n      var url = \"http://localhost:9997/products/decrease/\" + id;\n      return new Promise(function (resolve, reject) {\n        fetch(url).then(function (res) {\n          return res.json();\n        }).then(function (shipping) {\n          return resolve(shipping);\n        }).catch(function (error) {\n          return reject(error);\n        });\n      });\n    }\n  }, {\n    key: \"postOrder\",\n    value: function postOrder(body) {\n      return new Promise(function (resolve, reject) {\n        var url = \"http://localhost:7070/orders\";\n        fetch(url, {\n          method: \"POST\",\n          // or 'PUT'\n          body: JSON.stringify(body),\n          // data can be `string` or {object}!\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        }).then(function (res) {\n          return res.json();\n        }).then(function (data) {\n          return resolve(data);\n        }).catch(function (err) {\n          return reject(err);\n        });\n      });\n    }\n  }, {\n    key: \"getOrderHistoryByUser\",\n    value: function getOrderHistoryByUser(userId) {\n      console.log(\"recieved id: \" + userId);\n      var url = \"http://localhost:7070/orderHistory/user/\".concat(userId);\n      return new Promise(function (resolve, reject) {\n        fetch(url).then(function (res) {\n          return res.json();\n        }).then(function (response) {\n          var orderHistory = [];\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            var _loop = function _loop() {\n              var data = _step.value;\n              var order = {};\n              order[\"date\"] = data.date;\n              order[\"quantity\"] = Object.keys(data.productList).length;\n              var products = [];\n              var _iteratorNormalCompletion2 = true;\n              var _didIteratorError2 = false;\n              var _iteratorError2 = undefined;\n\n              try {\n                for (var _iterator2 = data.productList[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                  var id = _step2.value;\n                  API.getAllProductById(id).then(function (product) {\n                    return products.push(product);\n                  });\n                }\n              } catch (err) {\n                _didIteratorError2 = true;\n                _iteratorError2 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                    _iterator2.return();\n                  }\n                } finally {\n                  if (_didIteratorError2) {\n                    throw _iteratorError2;\n                  }\n                }\n              }\n\n              var totalAmount = API.getTotalPrice(products);\n              order[\"totalAmount\"] = totalAmount;\n              order[\"products\"] = products;\n              orderHistory.push(order);\n            };\n\n            for (var _iterator = response[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              _loop();\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n\n          resolve(orderHistory);\n        }).catch(function (err) {\n          return reject(err);\n        });\n      });\n    } // Help methods\n\n  }, {\n    key: \"getTotalPrice\",\n    value: function getTotalPrice(products) {\n      products.map(function (products, key) {\n        return console.log(products);\n      });\n    }\n  }, {\n    key: \"deleteUser\",\n    value: function deleteUser(id) {\n      var url = \"http://localhost9090/users/\" + id;\n      return new Promise(function (resolve, reject) {\n        fetch(url, {\n          method: \"DELETE\" // or 'PUT'\n\n        }).then(function () {\n          return resolve();\n        }).catch(function (err) {\n          return reject(err);\n        });\n      });\n    }\n  }, {\n    key: \"updateUser\",\n    value: function updateUser(user) {\n      var url = \"http://localhost:9090/user/\" + user.id;\n      return new Promise(function (resolve, reject) {\n        fetch(url, {\n          method: \"PUT\",\n          // or 'PUT'\n          body: JSON.stringify(user),\n          // data can be `string` or {object}!\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        }).then(function (res) {\n          return res.json();\n        }).then(function (data) {\n          return resolve(data);\n        }).catch(function (err) {\n          return reject(err);\n        });\n      });\n    }\n  }, {\n    key: \"setRating\",\n    value: function setRating(productId, numberOfRatings, user_id) {\n      var url = \"http://localhost:9997/products/rate/\".concat(productId, \"/\").concat(numberOfRatings, \"/\").concat(user_id);\n      return new Promise(function (resolve, reject) {\n        fetch(url).then(function (res) {\n          return res.json();\n        }).then(function () {\n          return resolve();\n        }).catch(function (err) {\n          return reject(err);\n        });\n      });\n    }\n  }, {\n    key: \"getAllUsers\",\n    value: function getAllUsers() {\n      var url = \"http://localhost:9090/users/\";\n      return new Promise(function (resolve, reject) {\n        fetch(url).then(function (res) {\n          return res.json();\n        }).then(function (users) {\n          console.log(\"users to resolve..\", users);\n          resolve(users);\n        }).catch(function (error) {\n          return reject(error);\n        });\n      });\n    }\n  }, {\n    key: \"changePassword\",\n    value: function changePassword(id, password) {\n      var url = \"http://localhost:9090/users/changePassword\";\n      var formData = new FormData();\n      formData.append(\"id\", id);\n      formData.append(\"password\", password);\n      return new Promise(function (resolve, reject) {\n        fetch(url, {\n          method: \"POST\",\n          // or 'PUT'\n          body: formData // data can be `string` or {object}!\n\n        }).then(function (res) {\n          return res.json();\n        }).then(function (data) {\n          return resolve(data);\n        }).catch(function (err) {\n          return reject(err);\n        });\n      });\n    }\n  }, {\n    key: \"getUserShippings\",\n    value: function getUserShippings(user) {\n      var shippingList = [];\n      return new Promise(function (resolve, reject) {\n        var _iteratorNormalCompletion3 = true;\n        var _didIteratorError3 = false;\n        var _iteratorError3 = undefined;\n\n        try {\n          for (var _iterator3 = user.shippingList[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n            var id = _step3.value;\n            API.getshippingById(id).then(function (shipping) {\n              return shippingList.push(shipping);\n            }).catch(function (err) {\n              return reject(err);\n            });\n          }\n        } catch (err) {\n          _didIteratorError3 = true;\n          _iteratorError3 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n              _iterator3.return();\n            }\n          } finally {\n            if (_didIteratorError3) {\n              throw _iteratorError3;\n            }\n          }\n        }\n\n        console.log(\"reolve now: \", shippingList);\n        resolve(shippingList);\n      });\n    }\n  }, {\n    key: \"getShippings\",\n    value: function getShippings() {\n      var url = \"http://localhost:9998/shipping/\";\n      return new Promise(function (resolve, reject) {\n        fetch(url).then(function (res) {\n          return res.json();\n        }).then(function (shippings) {\n          return resolve(shippings);\n        }).catch(function (error) {\n          return reject(error);\n        });\n      });\n    }\n  }]);\n\n  return API;\n}();\n\nexport { API as default };","map":{"version":3,"sources":["/Users/idrissheikh-idris/Downloads/final-project-dave3615/react-app/src/services/api.js"],"names":["API","url","Promise","resolve","reject","fetch","then","res","json","products","catch","error","id","product","body","formData","FormData","Object","keys","key","append","method","data","err","console","log","JSON","stringify","headers","merchant","newUser","shipping","shippingId","userId","response","orderHistory","order","date","productList","length","getAllProductById","push","totalAmount","getTotalPrice","map","user","productId","numberOfRatings","user_id","users","password","shippingList","getshippingById","shippings"],"mappings":"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","sourcesContent":["export default class API {\n  // returns Promise\n  // .then .catch\n  static getAllProducts() {\n    let url = \"http://localhost:9997/products\";\n    return new Promise((resolve, reject) => {\n      fetch(url)\n        .then(res => res.json())\n        .then(products => resolve(products))\n        .catch(error => reject(error));\n    });\n  }\n\n  static getAllProductById(id) {\n    let url = \"http://localhost:9997/products/\" + id;\n    return new Promise((resolve, reject) => {\n      fetch(url)\n        .then(res => res.json())\n        .then(product => resolve(product))\n        .catch(error => reject(error));\n    });\n  }\n\n  static getAllMyProduct(id) {\n    let url = \"http://localhost:9997/myproducts/\" + id;\n    return new Promise((resolve, reject) => {\n      fetch(url)\n        .then(res => res.json())\n        .then(product => resolve(product))\n        .catch(error => reject(error));\n    });\n  }\n\n  static postProduct(body) {\n    let url = \"http://localhost:9997/products\";\n    let formData = new FormData();\n    for (let key of Object.keys(body)) {\n      formData.append(key, body[key]);\n    }\n    return new Promise((resolve, reject) => {\n      fetch(url, {\n        method: \"POST\", // or 'PUT'\n        body: formData\n      })\n        .then(res => res.json())\n        .then(data => resolve(data))\n        .catch(err => reject(err));\n    });\n  }\n\n  static putProduct(body) {\n    console.log(\"received product: \", body);\n    let url = \"http://localhost:9997/products/\" + body.product.id;\n    console.log(\"url: \", url);\n    return new Promise((resolve, reject) => {\n      fetch(url, {\n        method: \"PUT\", // or 'PUT'\n        body: JSON.stringify(body), // data can be `string` or {object}!\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      })\n        .then(res => res.json())\n        .then(data => resolve(data))\n        .catch(err => reject(err));\n    });\n  }\n\n  static deleteProduct(id) {\n    let url = \"http://localhost:9997/products/\" + id;\n    return new Promise((resolve, reject) => {\n      fetch(url, {\n        method: \"DELETE\" // or 'PUT'\n      })\n        .then(() => resolve())\n        .catch(err => reject(err));\n    });\n  }\n\n  static getUserById(id) {\n    let url = \"http://localhost:9090/users/\" + id;\n    return new Promise((resolve, reject) => {\n      fetch(url)\n        .then(res => res.json())\n        .then(merchant => resolve(merchant))\n        .catch(error => reject(error));\n    });\n  }\n\n  static postUser(newUser) {\n    let url = \"http://localhost:9090/signup\";\n    return new Promise((resolve, reject) => {\n      fetch(url, {\n        method: \"POST\", // or 'PUT'\n        body: JSON.stringify(newUser), // data can be `string` or {object}!\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      })\n        .then(res => res.json())\n        .then(data => resolve(data))\n        .catch(err => reject(err));\n    });\n  }\n\n  static getshippingById(id) {\n    let url = \"http://localhost:9998/shipping/\" + id;\n    return new Promise((resolve, reject) => {\n      fetch(url)\n        .then(res => res.json())\n        .then(shipping => resolve(shipping))\n        .catch(error => reject(error));\n    });\n  }\n\n  static postShipping(shipping) {\n    let url = \"http://localhost:9998/shipping\";\n    return new Promise((resolve, reject) => {\n      fetch(url, {\n        method: \"POST\", // or 'PUT'\n        body: JSON.stringify(shipping), // data can be `string` or {object}!\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      })\n        .then(res => res.json())\n        .then(data => resolve(data))\n        .catch(err => reject(err));\n    });\n  }\n\n  static updateShipping(shippingId, userId, shipping) {\n    let url =\n      \"http://localhost:9998/updateShipping/id=\" +\n      shippingId +\n      \"&user_id=\" +\n      userId;\n    return new Promise((resolve, reject) => {\n      fetch(url, {\n        method: \"PUT\", // or 'PUT'\n        body: JSON.stringify(shipping), // data can be `string` or {object}!\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      })\n        .then(res => res.json())\n        .then(data => resolve(data))\n        .catch(err => reject(err));\n    });\n  }\n\n  static putShipping(shipping) {\n    let url = \"http://localhost:9998/shipping/\" + shipping.id;\n    return new Promise((resolve, reject) => {\n      fetch(url, {\n        method: \"PUT\", // or 'PUT'\n        body: JSON.stringify(shipping), // data can be `string` or {object}!\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      })\n        .then(res => res.json())\n        .then(data => resolve(data))\n        .catch(err => reject(err));\n    });\n  }\n\n  static decreaseProductQuantity(id) {\n    let url = \"http://localhost:9997/products/decrease/\" + id;\n    return new Promise((resolve, reject) => {\n      fetch(url)\n        .then(res => res.json())\n        .then(shipping => resolve(shipping))\n        .catch(error => reject(error));\n    });\n  }\n\n  static postOrder(body) {\n    return new Promise((resolve, reject) => {\n      let url = \"http://localhost:7070/orders\";\n      fetch(url, {\n        method: \"POST\", // or 'PUT'\n        body: JSON.stringify(body), // data can be `string` or {object}!\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      })\n        .then(res => res.json())\n        .then(data => resolve(data))\n        .catch(err => reject(err));\n    });\n  }\n\n  static getOrderHistoryByUser(userId) {\n    console.log(\"recieved id: \" + userId);\n    let url = `http://localhost:7070/orderHistory/user/${userId}`;\n    return new Promise((resolve, reject) => {\n      fetch(url)\n        .then(res => res.json())\n        .then(response => {\n          let orderHistory = [];\n          for (let data of response) {\n            let order = {};\n            order[\"date\"] = data.date;\n            order[\"quantity\"] = Object.keys(data.productList).length;\n            let products = [];\n            for (let id of data.productList) {\n              API.getAllProductById(id).then(product => products.push(product));\n            }\n            const totalAmount = API.getTotalPrice(products);\n            order[\"totalAmount\"] = totalAmount;\n            order[\"products\"] = products;\n            orderHistory.push(order);\n          }\n          resolve(orderHistory);\n        })\n        .catch(err => reject(err));\n    });\n  }\n\n  // Help methods\n  static getTotalPrice(products) {\n    products.map((products, key) => console.log(products));\n  }\n\n  static deleteUser(id) {\n    let url = \"http://localhost9090/users/\" + id;\n    return new Promise((resolve, reject) => {\n      fetch(url, {\n        method: \"DELETE\" // or 'PUT'\n      })\n        .then(() => resolve())\n        .catch(err => reject(err));\n    });\n  }\n\n  static updateUser(user) {\n    let url = \"http://localhost:9090/user/\" + user.id;\n    return new Promise((resolve, reject) => {\n      fetch(url, {\n        method: \"PUT\", // or 'PUT'\n        body: JSON.stringify(user), // data can be `string` or {object}!\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      })\n        .then(res => res.json())\n        .then(data => resolve(data))\n        .catch(err => reject(err));\n    });\n  }\n\n  static setRating(productId, numberOfRatings, user_id) {\n    let url = `http://localhost:9997/products/rate/${productId}/${numberOfRatings}/${user_id}`;\n    return new Promise((resolve, reject) => {\n      fetch(url)\n        .then(res => res.json())\n        .then(() => resolve())\n        .catch(err => reject(err));\n    });\n  }\n\n  static getAllUsers() {\n    let url = \"http://localhost:9090/users/\";\n    return new Promise((resolve, reject) => {\n      fetch(url)\n        .then(res => res.json())\n        .then(users => {\n          console.log(\"users to resolve..\", users);\n          resolve(users);\n        })\n        .catch(error => reject(error));\n    });\n  }\n\n  static changePassword(id, password) {\n    let url = \"http://localhost:9090/users/changePassword\";\n    const formData = new FormData();\n    formData.append(\"id\", id);\n    formData.append(\"password\", password);\n    return new Promise((resolve, reject) => {\n      fetch(url, {\n        method: \"POST\", // or 'PUT'\n        body: formData // data can be `string` or {object}!\n      })\n        .then(res => res.json())\n        .then(data => resolve(data))\n        .catch(err => reject(err));\n    });\n  }\n\n  static getUserShippings(user) {\n    let shippingList = [];\n    return new Promise((resolve, reject) => {\n      for (let id of user.shippingList) {\n        API.getshippingById(id)\n          .then(shipping => shippingList.push(shipping))\n          .catch(err => reject(err));\n      }\n      console.log(\"reolve now: \", shippingList);\n      resolve(shippingList);\n    });\n  }\n\n  static getShippings() {\n    let url = \"http://localhost:9998/shipping/\";\n    return new Promise((resolve, reject) => {\n      fetch(url)\n        .then(res => res.json())\n        .then(shippings => resolve(shippings))\n        .catch(error => reject(error));\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}